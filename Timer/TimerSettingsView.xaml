<UserControl x:Class="Timer.TimerSettingsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:prism="http://prismlibrary.com/"
             xmlns:hc="https://handyorg.github.io/handycontrol"
             xmlns:st="clr-namespace:AutoGrid;assembly=SpicyTaco.AutoGrid"
             xmlns:local="clr-namespace:Timer"
             xmlns:s="clr-namespace:System;assembly=mscorlib"
             xmlns:sr="clr-namespace:Infrastructure.SharedResources;assembly=Infrastructure"
             x:Name="Root">

	<prism:Dialog.WindowStyle>
		<Style TargetType="Window">
			<Setter Property="WindowStyle" Value="None" />
			<Setter Property="AllowsTransparency" Value="True" />
			<Setter Property="Width" Value="550" />
			<Setter Property="SizeToContent" Value="Height" />
			<Setter Property="MinHeight" Value="100" />
			<Setter Property="MinWidth" Value="470" />
			<Setter Property="ShowInTaskbar" Value="True" />
			<Setter Property="Icon" Value="/Infrastructure;component/SharedResources/images/settings.png" />
		</Style>
	</prism:Dialog.WindowStyle>

	<UserControl.DataContext>
		<local:TimerSettingsViewModel />
	</UserControl.DataContext>

	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/Infrastructure;component/SharedResources/ResourceDictionary.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<BooleanToVisibilityConverter x:Key="B2V" />
		</ResourceDictionary>
	</UserControl.Resources>

	<ContentControl Template="{StaticResource RoundedWithShadowTemplate}" BorderThickness="2, 0, 2, 0"
	                BorderBrush="{StaticResource MediumAccentBrush}">
		<st:AutoGrid Rows="*, auto" ColumnWidth="*" Background="{StaticResource MediumBrush}">
			<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" x:Name="ScrollViewer">
				<WrapPanel Width="550" x:Name="MainWrapPanel">
					<StackPanel Orientation="Vertical" Background="{StaticResource LightBrush}" Width="550">
						<ContentControl MinWidth="200" HorizontalAlignment="Center" HorizontalContentAlignment="Stretch">
							<TextBox Margin="0, 10, 0, 0" MinWidth="60" Name="TimerName"
							         hc:InfoElement.TitleWidth="Auto" hc:InfoElement.Placeholder="Give the Timer a Name"
							         hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="Timer Name:" hc:InfoElement.Necessary="True"
							         Style="{StaticResource NormalTextBox}" Text="{Binding Config.Name, Mode=TwoWay}" />
						</ContentControl>
						<StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
							<TextBlock Text="Show Name:" Style="{StaticResource BaseControlStyle}" />
							<CheckBox VerticalAlignment="Center" IsChecked="{Binding Config.ShowName, Mode=TwoWay}" />
						</StackPanel>
						<TextBlock Text="Duration" Style="{StaticResource SubHeaderLabelStyle}" />
						<st:AutoGrid Columns="*, *, *">
							<StackPanel Orientation="Horizontal" Margin="5, 0">
								<CheckBox VerticalAlignment="Center" IsChecked="{Binding Config.ShowHours, Mode=TwoWay}" />
								<TextBlock Text="Show Hours" Style="{StaticResource BaseControlStyle}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="10, 0">
								<CheckBox VerticalAlignment="Center" IsChecked="{Binding Config.ShowMinutes, Mode=TwoWay}" />
								<TextBlock Text="Show Minutes" Style="{StaticResource BaseControlStyle}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="15, 0">
								<CheckBox VerticalAlignment="Center" IsChecked="{Binding Config.ShowSeconds, Mode=TwoWay}" />
								<TextBlock Text="Show Seconds" Style="{StaticResource BaseControlStyle}" />
							</StackPanel>
						</st:AutoGrid>
						<st:AutoGrid Columns="*, auto, *, auto, *" RowHeight="*"
						             HorizontalAlignment="Stretch" Orientation="Vertical" ChildMargin="5">
							<TextBox MinWidth="60" HorizontalAlignment="Stretch" Margin="5"
							         hc:InfoElement.Placeholder="##" Text="{Binding Hours, Mode=TwoWay, StringFormat=D2}"
							         TextAlignment="Center" Name="HoursBox" Style="{StaticResource BiggishBox}" />
							<TextBlock Text=":" HorizontalAlignment="Center" VerticalAlignment="Center" />
							<TextBox MinWidth="60" HorizontalAlignment="Stretch" Margin="5"
							         hc:InfoElement.Placeholder="##" Text="{Binding Minutes, Mode=TwoWay, StringFormat=D2}"
							         TextAlignment="Center" Name="MinutesBox" Style="{StaticResource BiggishBox}" />
							<TextBlock Text=":" HorizontalAlignment="Center" VerticalAlignment="Center" />

							<TextBox MinWidth="60" HorizontalAlignment="Stretch" Margin="5"
							         hc:InfoElement.Placeholder="##" Text="{Binding Seconds, Mode=TwoWay, StringFormat=D2}"
							         TextAlignment="Center" Name="SecondsBox" Style="{StaticResource BiggishBox}" />
						</st:AutoGrid>
					</StackPanel>
					<StackPanel Width="550" Background="{StaticResource LightBrush}">
						<TextBlock Text="Hotkeys" Style="{StaticResource SubHeaderLabelStyle}" />
						<TextBlock Text="(Items in orange box can have the same shortcut)" Style="{StaticResource HintControlDark}"
						           Margin="10, -5, 0, 2" />
						<hc:FlexPanel FlexWrap="Wrap" JustifyContent="SpaceAround">
							<sr:ShortcutSetter x:Name="ShowHideShortcut" Label="Toggle Visibility:" Hint="Show/Hide the timer" />
							<sr:ShortcutSetter x:Name="ResetShortcut" Label="Reset:" Hint="Reset the timer back to its max duration" />
						</hc:FlexPanel>
						<Border BorderBrush="{StaticResource LightAccentBrush}" BorderThickness="2" Margin="5" Padding="2">
							<hc:FlexPanel FlexWrap="Wrap" JustifyContent="SpaceAround">
								<sr:ShortcutSetter x:Name="StartShortcut" Label="Start:" Hint="Start the timer" />
								<sr:ShortcutSetter x:Name="StopShortcut" Label="Stop:" Hint="Stop the timer" />
							</hc:FlexPanel>
						</Border>
					</StackPanel>
					<DockPanel Width="550" Background="{StaticResource LightBrush}">
						<TextBlock DockPanel.Dock="Top" Text="Appearance" Style="{StaticResource SubHeaderLabelStyle}" />
						<hc:FlexPanel FlexWrap="Wrap" JustifyContent="SpaceAround" AlignContent="SpaceAround">
							<StackPanel Orientation="Horizontal" Margin="10, 5">
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Background Color:" />
								<Button Style="{StaticResource ColorPickerButton}"
								        Background="{Binding Config.BackgroundColor, TargetNullValue={StaticResource MediumBrush}}"
								        Command="{Binding SelectColorCommand}" CommandParameter="{x:Static local:TimerColorZone.Background}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="10, 5">
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Text Color:" />
								<Button Style="{StaticResource ColorPickerButton}"
								        Background="{Binding Config.TextColor, TargetNullValue={StaticResource LightAccentBrush}}"
								        Command="{Binding SelectColorCommand}" CommandParameter="{x:Static local:TimerColorZone.Text}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="10, 5">
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Name Background Color:" />
								<Button Style="{StaticResource ColorPickerButton}"
								        Background="{Binding Config.NameBackgroundColor, TargetNullValue={StaticResource DarkHintBrush}}"
								        Command="{Binding SelectColorCommand}"
								        CommandParameter="{x:Static local:TimerColorZone.NameBackground}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="10, 5">
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Name Text Color:" />
								<Button Style="{StaticResource ColorPickerButton}"
								        Background="{Binding Config.NameTextColor, TargetNullValue={StaticResource LightBrush}}"
								        Command="{Binding SelectColorCommand}" CommandParameter="{x:Static local:TimerColorZone.NameText}" />
							</StackPanel>
							<StackPanel Orientation="Horizontal" Margin="10, 5">
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Divider Color:" />
								<Button Style="{StaticResource ColorPickerButton}"
								        Background="{Binding Config.DividerColor, TargetNullValue={StaticResource Light2Brush}}"
								        Command="{Binding SelectColorCommand}" CommandParameter="{x:Static local:TimerColorZone.Divider}" />
							</StackPanel>
						</hc:FlexPanel>
					</DockPanel>
					<StackPanel Width="550" Background="{StaticResource LightBrush}">
						<TextBlock Text="Misc" Style="{StaticResource SubHeaderLabelStyle}" />

						<ContentControl MinWidth="220" HorizontalAlignment="Left" HorizontalContentAlignment="Stretch">
							<TextBox Margin="5, 2" Name="ShowDesktops" Text="{Binding ShowDesktopsConverter}"
							         hc:InfoElement.TitleWidth="Auto" hc:InfoElement.Placeholder="e.g. '2, 3' or '0' to show on all"
							         hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="Show on desktops:"
							         Style="{StaticResource NormalTextBox}" />
						</ContentControl>
						<ContentControl MinWidth="270" HorizontalAlignment="Left" HorizontalContentAlignment="Stretch">
							<TextBox Margin="5, 2, 5, 10" Name="ActiveDesktops" Text="{Binding ActiveDesktopsConverter}"
							         hc:InfoElement.TitleWidth="Auto" hc:InfoElement.Placeholder="e.g. '2, 3' or '0' for all"
							         hc:InfoElement.TitlePlacement="Left" hc:InfoElement.Title="Auto-activate on desktops:"
							         Style="{StaticResource NormalTextBox}" />
						</ContentControl>
						<StackPanel Orientation="Horizontal">
							<CheckBox Margin="5" IsChecked="{Binding Config.LockedPauseEnabled}" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Pause While Computer is Locked" />
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<CheckBox Margin="5" IsChecked="{Binding Config.InactivityPauseEnabled}" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Pause after " />
							<TextBox Style="{StaticResource NormalTextBox}" MinWidth="50"
							         Text="{Binding Config.InactivityMinutes}" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text=" Minutes of Inactivity" />
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<CheckBox Margin="5" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Reset at" />
							<hc:TimePicker TimeFormat="hh:mm tt" Margin="0, 5" FontSize="{StaticResource NormalFontSize}" Name="TimePicker"
							               FontFamily="{StaticResource NormalFont}" Foreground="{StaticResource DarkBrush}">
								<hc:TimePicker.Clock>
									<hc:Clock TimeFormat="hh:mm tt" Style="{StaticResource Clok}" />
								</hc:TimePicker.Clock>
							</hc:TimePicker>
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Each Day" />
						</StackPanel>
					</StackPanel>
					<StackPanel Width="550" Background="{StaticResource LightBrush}">
						<TextBlock Text="When Timer is Done" Style="{StaticResource SubHeaderLabelStyle}" />
						<StackPanel>
							<StackPanel Orientation="Horizontal">
								<CheckBox Margin="5" x:Name="FlashColorCheckbox"
								          IsChecked="{Binding Config.ZeroOverflowAction.FlashColorEnabled}" />
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Flash Color" />
								<StackPanel Orientation="Horizontal" Margin="0"
								            Visibility="{Binding IsChecked, ElementName=FlashColorCheckbox, Converter={StaticResource B2V}}">
									<Button Style="{StaticResource BaseButton}" Width="40" Height="30" Tag="5" BorderThickness="3"
									        Background="{Binding Config.ZeroOverflowAction.FlashColor, FallbackValue=Crimson}" Margin="0"
									        Command="{Binding ZeroOverflowActionVm.SelectColorCommand}" />
									<TextBlock Style="{StaticResource BaseControlStyle}" Text="for" />
									<TextBox Style="{StaticResource NormalTextBox}" MinWidth="50"
									         Text="{Binding Config.ZeroOverflowAction.FlashColorSeconds}" />
									<TextBlock Style="{StaticResource BaseControlStyle}" Text="Seconds" />
								</StackPanel>
							</StackPanel>
							<StackPanel Orientation="Horizontal">
								<CheckBox Margin="5" x:Name="PlaySoundCheckbox"
								          IsChecked="{Binding Config.ZeroOverflowAction.PlaySoundEnabled}" />
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Play a Sound" />
								<Button Visibility="{Binding IsChecked, ElementName=PlaySoundCheckbox, Converter={StaticResource B2V}}"
								        Style="{StaticResource NormalButtonLight2Bordered}" Tag="10"
								        Content="{Binding ZeroOverflowActionVm.PlaySoundFile, TargetNullValue=&lt;No File Selected&gt;}"
								        Command="{Binding ZeroOverflowActionVm.SelectSoundCommand}" />
							</StackPanel>
							<st:AutoGrid Columns="auto, auto, *">
								<CheckBox Margin="5" x:Name="ShowMessageCheckbox"
								          IsChecked="{Binding Config.ZeroOverflowAction.ShowMessageEnabled}" />
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Show a Message" />
								<TextBox MinWidth="60" MaxHeight="80" hc:InfoElement.Placeholder="enter message" HorizontalAlignment="Left"
								         Margin="5" Style="{StaticResource NormalTextBox}" Text="{Binding Config.ZeroOverflowAction.Message}"
								         TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"
								         Visibility="{Binding IsChecked, ElementName=ShowMessageCheckbox, Converter={StaticResource B2V}}" />
							</st:AutoGrid>
							<StackPanel Orientation="Horizontal">
								<CheckBox Margin="5" x:Name="OverflowCheckbox" IsChecked="{Binding Config.OverflowEnabled}" />
								<TextBlock Style="{StaticResource BaseControlStyle}" Text="Overflow" />
								<TextBlock Style="{StaticResource HintControlDark}" Text="(Keep Counting into the Negatives)" />
							</StackPanel>
							<StackPanel Visibility="{Binding IsChecked, ElementName=OverflowCheckbox, Converter={StaticResource B2V}}">
								<ItemsControl ItemsSource="{Binding OverflowActionViews}" />
								<Button HorizontalAlignment="Center" Style="{StaticResource IconButtonBordered}"
								        Command="{Binding AddOverflowActionCommand}" Tag="15" MaxHeight="40" MinWidth="190">
									<Button.Effect>
										<DropShadowEffect ShadowDepth="2" Direction="330" Color="Black" Opacity="0.2" BlurRadius="3" />
									</Button.Effect>
									<Viewbox>
										<TextBlock Text="Add an Overflow Action" Style="{StaticResource HintControlDark}" />
									</Viewbox>
								</Button>
							</StackPanel>
						</StackPanel>
					</StackPanel>
					<StackPanel Width="550" Background="{StaticResource LightBrush}">
						<TextBlock Text="Conditions to Reset" Style="{StaticResource SubHeaderLabelStyle}" />
						<TextBlock Text="(Drag 'n' drop to reorder)" Style="{StaticResource HintControlDark}"
						           Margin="10, -5, 0, 2" />
						<StackPanel Orientation="Horizontal">
							<CheckBox IsChecked="{Binding Config.AutoResetOnConditions}" Margin="5" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Auto-Reset Once Conditions Met" />
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<CheckBox IsChecked="{Binding Config.AllowResetOverride}" Margin="5" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Allow Override" />
						</StackPanel>
						<StackPanel Orientation="Horizontal">
							<CheckBox IsChecked="{Binding Config.AllowResetWhileRunning}" Margin="5" />
							<TextBlock Style="{StaticResource BaseControlStyle}" Text="Allow Reset While Running" />
						</StackPanel>
						<ContentControl x:Name="RootResetCondition" />
						<Button Height="40" HorizontalAlignment="Center" Margin="0, 5, 0, 8"
						        Style="{StaticResource IconButtonBordered}" Command="{Binding AddResetConditionCommand}">
							<Viewbox>
								<TextBlock Text="+" FontSize="36" Margin="0, -17, 0, -8" Style="{StaticResource HintControlDark}" />
							</Viewbox>
						</Button>
					</StackPanel>
				</WrapPanel>
			</ScrollViewer>

			<DockPanel Background="{StaticResource LightBrush}" LastChildFill="False" Margin="0" x:Name="OkBar">
				<DockPanel.Resources>
					<ResourceDictionary>
						<Style x:Key="WithValidation" TargetType="{x:Type Button}" BasedOn="{StaticResource NormalButtonDarkBordered}">
							<Setter Property="IsEnabled" Value="false" />
							<Style.Triggers>
								<!-- Require the controls to be valid in order to press OK -->
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding ElementName=HoursBox, Path=(Validation.HasError)}" Value="false" />
										<Condition Binding="{Binding ElementName=MinutesBox, Path=(Validation.HasError)}" Value="false" />
										<Condition Binding="{Binding ElementName=SecondsBox, Path=(Validation.HasError)}" Value="false" />
										<Condition Binding="{Binding ElementName=TimePicker, Path=(Validation.HasError)}" Value="false" />
									</MultiDataTrigger.Conditions>
									<Setter Property="IsEnabled" Value="true" />
								</MultiDataTrigger>
								<DataTrigger Binding="{Binding Text, ElementName=TimerName}" Value="{x:Static s:String.Empty}">
									<Setter Property="IsEnabled" Value="False" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</ResourceDictionary>
				</DockPanel.Resources>
				<Button DockPanel.Dock="Right" Content="OK" Style="{StaticResource WithValidation}" IsDefault="True"
				        Margin="5, 5, 10, 5" Padding="5, 5, 6, 5" Width="70" Command="{Binding OkCommand}" />
				<Button DockPanel.Dock="Right" Content="APPLY" Width="70" Style="{StaticResource WithValidation}"
				        Command="{Binding ApplyCommand}" />
				<Button DockPanel.Dock="Right" Content="CANCEL" Style="{StaticResource NormalButtonDarkBordered}" Width="70"
				        Command="{Binding CancelCommand}" IsCancel="True" />

			</DockPanel>

		</st:AutoGrid>
	</ContentControl>

</UserControl>